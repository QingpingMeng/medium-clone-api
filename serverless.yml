# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: medium-clone-api

plugins:
  - serverless-webpack
  - serverless-offline

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 384 # set the maximum memory of the Lambdas in Megabytes
  timeout: 10 # the timeout is 10 seconds (default is 6 seconds)
  stage: ${opt:stage, 'local'} # setting the env stage to dev, this will be visible in the routes
  environment: ${file(./env.yml):${opt:stage, self:provider.stage}}
  region: us-east-1

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**
package:
  excludeDevDependencies: true

functions:
  auth:
    handler: handler.authorizer
    cors: true
      
  login:
    handler: handler.login
    events:
      - http:
          path: /api/users/login
          method: post
          cors: true

  currentUser:
    handler: handler.currentUser
    events:
      - http:
          path: /api/user
          method: get
          cors: true
          authorizer: auth

  getProfile:
    handler: handler.getProfile
    events:
      - http:
          path: /api/profiles/{username}
          cors: true
          method: get
          request:
            parameters:
              paths:
                username: true

  followUser:
    handler: handler.followUser
    events:
      - http:
          path: /api/profiles/{username}/follow
          method: post
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                username: true
        
  unfollowUser:
    handler: handler.unfollowUser
    events:
      - http:
          path: /api/profiles/{username}/follow
          method: delete
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                username: true
        
  listArticles:
    handler: handler.listArticles
    events:
      - http:
          path: /api/articles
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                tag: false
                author: false
                favorited: false
                limit: false
                offset: false

  feedArticles:
    handler: handler.feedArticles
    events:
      - http:
          path: /api/articles/feed
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                limit: false
                offset: false
          authorizer: auth
        
  getArticle:
    handler: handler.getArticle
    events:
      - http:
          path: /api/articles/{slug}
          method: get
          cors: true
          request:
            parameters:
              paths:
                slug: true

  createArticle:
    handler: handler.createArticle
    events:
      - http:
          path: /api/articles/
          method: post
          cors: true
          authorizer: auth

  updateArticle:
    handler: handler.updateArticle
    events:
      - http:
          path: /api/articles/{slug}
          method: put
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                slug: true

  deleteArticle:
    handler: handler.deleteArticle
    events:
      - http:
          path: /api/articles/{slug}
          method: delete
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                slug: true
          
  addCommentToArticle:
    handler: handler.addCommentToArticle
    events:
      - http:
          path: /api/articles/{slug}/comments
          method: post
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                slug: true

  getCommentsFromArticle:
    handler: handler.getCommentsFromArticle
    events:
      - http:
          path: /api/articles/{slug}/comments
          method: get
          cors: true
          request:
            parameters:
              paths:
                slug: true

  deleteComment:
    handler: handler.deleteComment
    events:
      - http:
          path: /api/articles/{slug}/comments/{id}
          method: delete
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                slug: true
                id: true

  favoriteArticle:
    handler: handler.favoriteArticle
    events:
      - http:
          path: /api/articles/{slug}/favorite
          method: post
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                slug: true

  unfavoriteArticle:
    handler: handler.unfavoriteArticle
    events:
      - http:
          path: /api/articles/{slug}/favorite
          method: delete
          cors: true
          authorizer: auth
          request:
            parameters:
              paths:
                slug: true

  getTags:
    handler: handler.getTags
    events:
      - http:
          path: /api/tags
          method: get
          cors: true

  register:
    handler: handler.signup
    events:
      - http:
          path: /api/users/
          method: post
          cors: true
  
  updateUser:
    handler: handler.updateUser
    events:
      - http:
          path: /api/user/
          method: put
          cors: true
          authorizer: auth

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
